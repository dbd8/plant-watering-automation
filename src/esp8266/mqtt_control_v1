#include <ESP8266WiFi.h>
#include <PubSubClient.h>

//################################################################################
// CONFIG
// you need to define your instances/zones/topic_names you want to automate
// all of the following arrays need to have the same length / number of elements

int topic_pin[] = {D1, D2, D3, D4};
char topic_names[4][30] = {"zone1","zone2","zone3","zone4"};
long topic_timer[] = {0,0,0,0};
long topic_timer_default[] = {5000,5000,5000,5000};
long topic_clock[] = {0,0,0,0};

//################################################################################

int number_topic_names = (sizeof(topic_pin) / sizeof(topic_pin[0]));
int timer_override = 0;
int topic_state_refresh = 60000;
int tellstate = 0;

const int AirValue = 835;   //you need to replace this with your sensors value
const int WaterValue = 475;  //you need to replace this with your sensors value
const int SensorPin = A0;
int moistureThreshold = 50; //percentage of moisture, if moisture below


//WiFi-Settings
const char* ssid     = "***";
const char* password = "***";

//change with your MQTT server IP address
const char* mqtt_server = "XXX.XXX.XXX.XXX";


WiFiServer server(80);

WiFiClient espClient;
PubSubClient client(espClient);


void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print(topic);
  Serial.print(" => ");

  char* payload_str;
  payload_str = (char*) malloc(length + 1);
  memcpy(payload_str, payload, length);
  payload_str[length] = '\0';
  Serial.println(String(payload_str));

  char* last_token = strrchr(payload_str, ';');
  if (last_token != NULL){
    timer_override = atoi(last_token+1);
  }else{
    timer_override = 0;
  }

  for ( int i = 0; i < number_topic_names; i++){
    //concat char of topic_names with state
    char topic_state[30];
    strcpy(topic_state,topic_names[i]);
    strcat(topic_state,"/state");


    if ( String(topic) == topic_names[i] ) {
      //Serial.println("Here");
      if ((strcmp(strtok(payload_str, ";"), "on") == 0 )) {
        if (soilMoisturePercent() > moistureThreshold){
          Serial.print("Won't switch on '");
          Serial.print(topic);
          Serial.print("' due to sufficient moisture level: ");
          Serial.println(int(soilMoisturePercent()));
        }else{
          digitalWrite(topic_pin[i], LOW);   // turn the topic_pin on
          client.publish(topic_state ,"on");
          topic_clock[i] = millis();
          if (timer_override != 0){
            topic_timer[i] = timer_override;
          }else{
            topic_timer[i] = topic_timer_default[i];
          }
        }
      } else if (strcmp(strtok(payload_str, ";"), "off") == 0 ) {
        digitalWrite(topic_pin[i], HIGH);    // turn the topic_pin off
        client.publish(topic_state,"off");
      } else {
        Serial.print("I do not know what to do with ");
        Serial.print(String(payload_str));
        Serial.print(" on topic ");
        Serial.println(String(topic));
      }
    }
  }
}


void connect_to_MQTT() {
 client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

  if (client.connect("plant-watering-automation")) {
    Serial.println("(re)-connected to MQTT");
    for ( int i = 0; i < number_topic_names; i++){
      client.subscribe(topic_names[i]);
    }
  } else {
    Serial.println("Could not connect to MQTT");
  }
}


int soilMoisturePercent(){
  int soilMoistureValue = analogRead(SensorPin);  //put Sensor insert into soil
  int calibrated = map(soilMoistureValue, AirValue, WaterValue, 0, 100);
  return calibrated;
}



void setup() {
  Serial.begin(115200);
  delay(10);

  // Connecting to our WiFi network
  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  connect_to_MQTT();

  // initialize pins
  for ( int i = 0; i < number_topic_names; i++){
    pinMode(topic_pin[i], OUTPUT);
  }

  server.begin();
}




void loop() {
  client.loop();

  if (! client.connected()) {
    Serial.println("Not connected to MQTT....");
    connect_to_MQTT();
    delay(5000);
  }

  // Tell the current state of topic_pins every X seconds

  if ( (millis() - tellstate) > topic_state_refresh ) {
    for ( int i = 0; i < number_topic_names; i++){
      //concat char of topic_names with state
      char topic_state[30];
      strcpy(topic_state,topic_names[i]);
      strcat(topic_state,"/state");

      if ( digitalRead(topic_pin[i]) ) {
         client.publish(topic_state,"off");
      }
      else {
        client.publish(topic_state,"on");
      }
    }

    tellstate = millis();
  }


  // Timer for switch off of topics
  for ( int i = 0; i < number_topic_names; i++){
    if (( (millis() - topic_clock[i]) > topic_timer[i] ) and (digitalRead(topic_pin[i]) == 0)) {
      //both of the following lines are doing the same, however they are not redundant
      //the digitalWrite will switch off of the topic_pin even if network connection is lost and mqtt message cannot be published
      //this guarentees high safety level of operation and prevents flooding
      //the client.publish is necessary to tell the mqtt-broker and clients the new event for correct handling
      digitalWrite(topic_pin[i], HIGH);   // turn the topic_pin off
      Serial.print("Timer: ");
      client.publish(topic_names[i],"off");
      topic_clock[i] = 0;
    }
  }



  // Browser control

  WiFiClient wifi_client = server.available();
  if(!wifi_client){
    return;
  }

  String request = wifi_client.readStringUntil('\r');
  wifi_client.flush();

  if(request==""){
    wifi_client.stop();
    return;
  }

  // publish MQTT message depending on action
  if(request.indexOf("zone1=1")>=0){
    client.publish("zone1","off");
  }
  else if(request.indexOf("zone1=0")>=0){
    client.publish("zone1","on");
  }
  if(request.indexOf("zone2=1")>=0){
    client.publish("zone2","off");
  }
  else if(request.indexOf("zone2=0")>=0){
    client.publish("zone2","on");
  }
  if(request.indexOf("zone3=1")>=0){
    client.publish("zone3","off");
  }
  else if(request.indexOf("zone3=0")>=0){
    client.publish("zone3","on");
  }
  if(request.indexOf("zone4=1")>=0){
    client.publish("zone4","off");
  }
  else if(request.indexOf("zone4=0")>=0){
    client.publish("zone4","on");
  }

  //Ausgabe erzeugen
  String output;
  //output += "http/1.x 200 OK\n";
  //output += "Content-Type: text/html; charset=UTF-8\n\n";
  output += "<!DOCTYPE html>";
  output += "<html>";
  output += "<head><title>plant watering automation</title>";
  output += "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">";
  output += "</head>";
  output += "<h1>Zonen schalten</h1>";
  output += "<form action=\"\" method=\"GET\">";
  output += "<button name=\"zone1\" value=\"0\">Zone 1 - ON</button>";
  output += "<button style=\"margin-left:30px;\" name=\"zone1\" value=\"1\">Zone 1 - OFF</button>";
  output += "<br><br>";
  output += "<button name=\"zone2\" value=\"0\">Zone 2 - ON</button>";
  output += "<button style=\"margin-left:30px;\" name=\"zone2\" value=\"1\">Zone 2 - OFF</button>";
  output += "<br><br>";
  output += "<button name=\"zone3\" value=\"0\">Zone 3 - ON</button>";
  output += "<button style=\"margin-left:30px;\" name=\"zone3\" value=\"1\">Zone 3 - OFF</button>";
  output += "<br><br>";
  output += "<button name=\"zone4\" value=\"0\">Zone 4 - ON</button>";
  output += "<button style=\"margin-left:30px;\" name=\"zone4\" value=\"1\">Zone 4 - OFF</button>";
  output += "</form>";
  output += "</html>";

  wifi_client.print(output);
  delay(500);
  wifi_client.stop();

}